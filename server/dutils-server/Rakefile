require 'rubygems'

# Ensure that we can always load relative files
$:.unshift File.dirname( __FILE__)

require './lib/Runner'

clientEnvironments = {
  "local" => {
    :baseClientDir => "src/Morenware/DutilsBundle/Resources",
    :version => ''
  }
}

# Local task, no default to deploy
task :webpack_watch, :environmentName do |t, args|
  env = clientEnvironments[args.environmentName]
  baseDir = env[:baseClientDir]
  puts "== Watching for changes in #{baseDir} =="
  setup = 'PATH=node_modules/.bin:$PATH && export PATH && '
  run setup + "webpack #{baseDir}/client/app/init.coffee #{baseDir}/public/js/app/init.js -d --watch"
end

task :lint_coffeescript do
  run_with_params do |args|
    puts '== CoffeeScript Lint =='

    # If only .coffee files have changed, then only lint those files.
    coffee_files = args.select { |file| file.end_with? '.coffee' }
    paths = args.length > 0 && args.length == coffee_files.length ? args : ["src/Morenware/DutilsBundle/Resources/client/app"]

    setup = 'PATH=node_modules/.bin:$PATH && export PATH && '
    run setup + "coffeelint -f coffeelint.json '#{paths.join("' '")}'"
  end
end

def run(command, ignore_failure = false)
  Runner.new($stdout).run command, ignore_failure
end

def run_with_params

  # ARGV contains the name of the rake task and all of the arguments.
  # Remove/shift the first element, i.e. the task name.
  ARGV.shift

  yield(ARGV)

  # By default, rake considers each 'argument' to be the name of an actual task.
  # It will try to invoke each one as a task.  By dynamically defining a dummy
  # task for every argument, we can prevent an exception from being thrown
  # when rake inevitably doesn't find a defined task with that name.
  ARGV.each do |arg|
    task arg.to_sym do ; end
  end

end